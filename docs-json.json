{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["App"]
      }
    },
    "/clients": {
      "get": {
        "operationId": "ClientController_index",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "default": "created_at",
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": "desc",
              "enum": ["asc", "desc"],
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "description": "Comma separated column names",
            "schema": {
              "example": "id,client_id,name,type",
              "enum": [
                "id",
                "client_id",
                "client_secret",
                "name",
                "type",
                "redirect_uris",
                "allowed_scopes",
                "allowed_grants",
                "is_active",
                "require_pkce",
                "settings",
                "tenant_id",
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedClientSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Get all clients",
        "tags": ["Client"]
      },
      "post": {
        "operationId": "ClientController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Create client",
        "tags": ["Client"]
      }
    },
    "/clients/{id}": {
      "get": {
        "operationId": "ClientController_show",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Get client details by id",
        "tags": ["Client"]
      },
      "patch": {
        "operationId": "ClientController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Update client",
        "tags": ["Client"]
      },
      "delete": {
        "operationId": "ClientController_destroy",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Delete client",
        "tags": ["Client"]
      }
    },
    "/users": {
      "post": {
        "operationId": "UserController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Create client",
        "tags": ["User"]
      },
      "get": {
        "operationId": "UserController_getUsers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "default": "created_at",
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": "desc",
              "enum": ["asc", "desc"],
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": true,
            "in": "query",
            "description": "Comma separated column names",
            "schema": {
              "example": "id,email,name,phone_number,address,locale,email_verified,phone_number_verified,created_at",
              "enum": [
                "id",
                "email",
                "name",
                "phone_number",
                "address",
                "locale",
                "email_verified",
                "phone_number_verified",
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsersResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Get all users",
        "tags": ["User"]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UserController_getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Get client details by id",
        "tags": ["User"]
      },
      "patch": {
        "operationId": "UserController_updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Update client",
        "tags": ["User"]
      },
      "delete": {
        "operationId": "UserController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Delete client",
        "tags": ["User"]
      }
    },
    "/org/{id}": {
      "get": {
        "operationId": "OrgController_findById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Org"]
      }
    },
    "/roles": {
      "get": {
        "operationId": "RoleController_getRoles",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "default": "created_at",
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": "desc",
              "enum": ["asc", "desc"],
              "type": "string"
            }
          },
          {
            "name": "columns",
            "required": false,
            "in": "query",
            "description": "Comma separated column names",
            "schema": {
              "example": "id,name,description,is_system,created_at",
              "enum": [
                "id",
                "name",
                "description",
                "is_system",
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Get all roles",
        "tags": ["Role"]
      },
      "post": {
        "operationId": "RoleController_createRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Create role",
        "tags": ["Role"]
      }
    },
    "/roles/{id}": {
      "get": {
        "operationId": "RoleController_getRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Get role details by id",
        "tags": ["Role"]
      },
      "patch": {
        "operationId": "RoleController_updateRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Update role",
        "tags": ["Role"]
      },
      "delete": {
        "operationId": "RoleController_deleteRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSwaggerModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponseSwaggerModel"
                }
              }
            }
          },
          "404": {
            "description": "Role not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponseSwaggerModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Delete role",
        "tags": ["Role"]
      }
    }
  },
  "info": {
    "title": "Identety API",
    "description": "Identity Provider API",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "x-api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "ClientSwaggerModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid-123"
          },
          "clientId": {
            "type": "string",
            "example": "client_abc123"
          },
          "clientSecret": {
            "type": "string",
            "example": "secret_xyz789"
          },
          "name": {
            "type": "string",
            "example": "My Client"
          },
          "type": {
            "type": "string",
            "enum": ["public", "private", "m2m"]
          },
          "redirectUris": {
            "example": ["https://example.com/callback"],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedScopes": {
            "example": ["openid", "profile"],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedGrants": {
            "example": ["authorization_code"],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "settings": {
            "type": "object",
            "example": {
              "tokenEndpointAuthMethod": "client_secret_basic",
              "accessTokenTTL": 3600
            }
          }
        },
        "required": [
          "id",
          "clientId",
          "clientSecret",
          "name",
          "type",
          "redirectUris",
          "allowedScopes",
          "allowedGrants",
          "isActive",
          "settings"
        ]
      },
      "PaginatedClientSwaggerModel": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientSwaggerModel"
            }
          },
          "meta": {
            "type": "object",
            "example": {
              "totalCount": 1,
              "currentPage": 1,
              "hasNextPage": false,
              "totalPages": 1
            }
          }
        },
        "required": ["nodes", "meta"]
      },
      "UnAuthorizedResponseSwaggerModel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid API key"
          },
          "statusCode": {
            "type": "number",
            "example": 401
          },
          "error": {
            "type": "string",
            "example": "Unauthorized"
          }
        },
        "required": ["message", "statusCode", "error"]
      },
      "NotFoundResponseSwaggerModel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not Found"
          },
          "statusCode": {
            "type": "number",
            "example": 401
          }
        },
        "required": ["message", "statusCode"]
      },
      "ClientSettings": {
        "type": "object",
        "properties": {}
      },
      "CreateClientDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Client Name"
          },
          "type": {
            "type": "string",
            "enum": ["public", "private", "m2m"],
            "description": "Client type"
          },
          "redirectUris": {
            "description": "Redirect URIs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedScopes": {
            "description": "Allowed Scopes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedGrants": {
            "type": "array",
            "description": "Allowed Grants",
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "client_credentials",
                "refresh_token"
              ]
            }
          },
          "settings": {
            "description": "Client Settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ]
          }
        },
        "required": ["name", "type"]
      },
      "UpdateClientDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Client Name"
          },
          "redirectUris": {
            "description": "Redirect URIs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedScopes": {
            "description": "Allowed Scopes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedGrants": {
            "type": "array",
            "description": "Allowed Grants",
            "items": {
              "type": "string",
              "enum": [
                "authorization_code",
                "client_credentials",
                "refresh_token"
              ]
            }
          },
          "settings": {
            "description": "Client Settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ]
          }
        },
        "required": ["name"]
      },
      "UserAddressDto": {
        "type": "object",
        "properties": {
          "streetAddress": {
            "type": "string",
            "example": "123 Main St"
          },
          "locality": {
            "type": "string",
            "example": "New York"
          },
          "region": {
            "type": "string",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "example": "10001"
          },
          "country": {
            "type": "string",
            "example": "USA"
          }
        },
        "required": [
          "streetAddress",
          "locality",
          "region",
          "postalCode",
          "country"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "minLength": 8
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "givenName": {
            "type": "string",
            "example": "John"
          },
          "familyName": {
            "type": "string",
            "example": "Doe"
          },
          "picture": {
            "type": "string",
            "example": "https://example.com/photo.jpg"
          },
          "locale": {
            "type": "string",
            "example": "en-US"
          },
          "address": {
            "$ref": "#/components/schemas/UserAddressDto"
          },
          "metadata": {
            "type": "object",
            "example": {
              "customField": "value"
            }
          }
        },
        "required": [
          "email",
          "password",
          "name",
          "givenName",
          "familyName",
          "picture",
          "locale",
          "address",
          "metadata"
        ]
      },
      "UserAddressResponseModel": {
        "type": "object",
        "properties": {
          "streetAddress": {
            "type": "string",
            "example": "123 Main St"
          },
          "locality": {
            "type": "string",
            "example": "New York"
          },
          "region": {
            "type": "string",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "example": "10001"
          },
          "country": {
            "type": "string",
            "example": "USA"
          }
        },
        "required": [
          "streetAddress",
          "locality",
          "region",
          "postalCode",
          "country"
        ]
      },
      "UserResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "43fad864-738d-4367-a012-2b8c6948c36a"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "givenName": {
            "type": "string",
            "example": "John"
          },
          "familyName": {
            "type": "string",
            "example": "Doe"
          },
          "picture": {
            "type": "string",
            "example": "https://example.com/photo.jpg"
          },
          "locale": {
            "type": "string",
            "example": "en-US"
          },
          "address": {
            "$ref": "#/components/schemas/UserAddressResponseModel"
          },
          "metadata": {
            "type": "object",
            "example": {
              "customField": "value"
            }
          }
        },
        "required": [
          "id",
          "name",
          "givenName",
          "familyName",
          "picture",
          "locale",
          "address",
          "metadata"
        ]
      },
      "PaginatedUsersResponseModel": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponseModel"
            }
          },
          "meta": {
            "type": "object",
            "example": {
              "totalCount": 1,
              "currentPage": 1,
              "hasNextPage": false,
              "totalPages": 1
            }
          }
        },
        "required": ["nodes", "meta"]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "givenName": {
            "type": "string",
            "example": "John"
          },
          "familyName": {
            "type": "string",
            "example": "Doe"
          },
          "picture": {
            "type": "string",
            "example": "https://example.com/photo.jpg"
          },
          "locale": {
            "type": "string",
            "example": "en-US"
          },
          "address": {
            "$ref": "#/components/schemas/UserAddressDto"
          },
          "metadata": {
            "type": "object",
            "example": {
              "customField": "value"
            }
          }
        },
        "required": [
          "name",
          "givenName",
          "familyName",
          "picture",
          "locale",
          "address",
          "metadata"
        ]
      },
      "RoleSwaggerModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid-123"
          },
          "name": {
            "type": "string",
            "example": "admin_role"
          },
          "description": {
            "type": "string",
            "example": "Administrator role with full access"
          },
          "is_system": {
            "type": "boolean",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "is_system",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedRoleResponseModel": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleSwaggerModel"
            }
          },
          "meta": {
            "type": "object",
            "example": {
              "totalCount": 1,
              "currentPage": 1,
              "hasNextPage": false,
              "totalPages": 1
            }
          }
        },
        "required": ["nodes", "meta"]
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Content Editor",
            "description": "Role name will be converted to snake_case automatically"
          },
          "description": {
            "type": "string",
            "example": "Can manage and publish content"
          },
          "is_system": {
            "type": "boolean",
            "example": false,
            "description": "Whether this is a system role. Cannot be set to true manually."
          }
        },
        "required": ["name"]
      },
      "UpdateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Content Manager"
          },
          "description": {
            "type": "string",
            "example": "Can manage all content and users"
          },
          "is_system": {
            "type": "boolean",
            "example": false,
            "description": "System roles cannot be modified"
          }
        }
      }
    }
  }
}
